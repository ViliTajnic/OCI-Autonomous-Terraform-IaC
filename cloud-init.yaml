#cloud-config

package_update: true
package_upgrade: true

packages:
  - python3
  - python3-pip
  - unzip
  - wget
  - curl

runcmd:
  # Install python-oracledb
  - python3 -m pip install --upgrade pip
  - python3 -m pip install oracledb flask pandas

  # Create test connection script
  - |
    cat > /home/opc/test_connection.py << 'EOF'
    #!/usr/bin/env python3
    """
    Test Oracle ADB connection using python-oracledb
    """
    import oracledb
    import os

    def test_connection():
        wallet_dir = "/home/opc/wallet"
        
        if not os.path.exists(wallet_dir):
            print("‚ùå Wallet directory not found!")
            print("Please download wallet from OCI Console and run:")
            print("  scp wallet.zip opc@<instance_ip>:")
            print("  ssh opc@<instance_ip>")
            print("  unzip wallet.zip -d wallet/")
            return
        
        print("üîç Testing python-oracledb connection...")
        print(f"üì¶ python-oracledb version: {oracledb.__version__}")
        
        try:
            # Update these with your credentials
            connection = oracledb.connect(
                user="ADMIN",
                password="${admin_password}",  # From terraform
                dsn="PYTHONDB_high",           # Update if different
                config_dir=wallet_dir
            )
            
            cursor = connection.cursor()
            cursor.execute("SELECT 'Hello from Oracle ADB!' FROM dual")
            result = cursor.fetchone()
            
            print("‚úÖ Connection successful!")
            print(f"üìä Result: {result[0]}")
            
            # Get database info
            cursor.execute("SELECT banner FROM v$version WHERE rownum = 1")
            version = cursor.fetchone()
            print(f"üóÑÔ∏è  Database: {version[0]}")
            
            cursor.close()
            connection.close()
            
        except Exception as e:
            print(f"‚ùå Connection failed: {e}")
            print("üí° Check your wallet files and credentials")

    if __name__ == "__main__":
        test_connection()
    EOF

  # Create Flask web app
  - |
    cat > /home/opc/flask_app.py << 'EOF'
    #!/usr/bin/env python3
    """
    Simple Flask app with Oracle ADB
    """
    from flask import Flask, render_template_string
    import oracledb

    app = Flask(__name__)

    # Database configuration
    DB_CONFIG = {
        'user': 'ADMIN',
        'password': '${admin_password}',
        'dsn': 'PYTHONDB_high',
        'config_dir': '/home/opc/wallet'
    }

    HTML_TEMPLATE = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Python + Oracle ADB</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .success { color: #28a745; font-weight: bold; }
            .error { color: #dc3545; font-weight: bold; }
            .info { background: #e9ecef; padding: 15px; border-radius: 5px; margin: 15px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üêç Python + Oracle Autonomous Database</h1>
            <div class="info">
                <strong>Driver:</strong> python-oracledb {{ oracledb_version }}<br>
                <strong>Status:</strong> {{ status }}<br>
                <strong>Time:</strong> {{ timestamp }}
            </div>
            
            {% if error %}
                <div class="error">‚ùå {{ error }}</div>
            {% else %}
                <div class="success">‚úÖ Database connection successful!</div>
                <h3>Query Results:</h3>
                <ul>
                {% for item in data %}
                    <li>{{ item }}</li>
                {% endfor %}
                </ul>
            {% endif %}
        </div>
    </body>
    </html>
    '''

    @app.route('/')
    def index():
        try:
            connection = oracledb.connect(**DB_CONFIG)
            cursor = connection.cursor()
            
            # Test queries
            results = []
            
            cursor.execute("SELECT 'Hello from Oracle!' FROM dual")
            results.append(f"Message: {cursor.fetchone()[0]}")
            
            cursor.execute("SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM dual")
            timestamp = cursor.fetchone()[0]
            results.append(f"Database time: {timestamp}")
            
            cursor.execute("SELECT banner FROM v$version WHERE rownum = 1")
            results.append(f"Version: {cursor.fetchone()[0]}")
            
            cursor.close()
            connection.close()
            
            return render_template_string(
                HTML_TEMPLATE,
                status="Connected",
                timestamp=timestamp,
                oracledb_version=oracledb.__version__,
                data=results,
                error=None
            )
            
        except Exception as e:
            return render_template_string(
                HTML_TEMPLATE,
                status="Failed",
                timestamp="N/A",
                oracledb_version=oracledb.__version__,
                data=[],
                error=str(e)
            )

    if __name__ == '__main__':
        print("üöÄ Starting Flask app...")
        print("üåê Access at: http://<instance-ip>:5000")
        app.run(host='0.0.0.0', port=5000, debug=True)
    EOF

  # Create simple connection example
  - |
    cat > /home/opc/connection_example.py << 'EOF'
    #!/usr/bin/env python3
    """
    Simple Oracle ADB connection example
    """
    import oracledb

    # Connection using python-oracledb (Thin mode - no Oracle Client needed)
    try:
        connection = oracledb.connect(
            user="ADMIN",
            password="${admin_password}",
            dsn="PYTHONDB_high",
            config_dir="/home/opc/wallet"
        )
        
        print("‚úÖ Connected to Oracle Autonomous Database!")
        
        # Execute a simple query
        cursor = connection.cursor()
        cursor.execute("SELECT 'python-oracledb works!' as message FROM dual")
        result = cursor.fetchone()
        print(f"üìä Query result: {result[0]}")
        
        # Clean up
        cursor.close()
        connection.close()
        print("‚úÖ Connection closed")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print("üí° Make sure wallet is uploaded and extracted to /home/opc/wallet/")
    EOF

  # Set permissions
  - chown -R opc:opc /home/opc/
  - chmod +x /home/opc/*.py

  # Log completion
  - echo "$(date): Python-oracledb setup complete" > /var/log/setup.log

final_message: |
  üéâ Setup complete!
  
  Python packages installed:
  ‚Ä¢ python-oracledb (modern Oracle driver)
  ‚Ä¢ flask (web framework)
  ‚Ä¢ pandas (data analysis)
  
  Ready-to-use scripts:
  ‚Ä¢ test_connection.py - Test DB connection
  ‚Ä¢ flask_app.py - Web application
  ‚Ä¢ connection_example.py - Basic example
  
  Next: Upload database wallet and test connection!