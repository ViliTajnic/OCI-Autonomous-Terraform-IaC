#cloud-config
package_update: true
package_upgrade: false

packages:
  - python3
  - python3-pip
  - unzip
  - wget
  - curl

write_files:
  - content: |
      #!/bin/bash
      echo "Starting Oracle Client setup..."
      
      # Create directory for Oracle client
      sudo mkdir -p /opt/oracle
      cd /tmp
      
      # Download Oracle Instant Client
      wget -q https://download.oracle.com/otn_software/linux/instantclient/1921000/oracle-instantclient19.21-basic-19.21.0.0.0-1.x86_64.rpm
      wget -q https://download.oracle.com/otn_software/linux/instantclient/1921000/oracle-instantclient19.21-devel-19.21.0.0.0-1.x86_64.rpm
      
      # Install Oracle Instant Client
      sudo rpm -Uvh oracle-instantclient19.21-basic-19.21.0.0.0-1.x86_64.rpm
      sudo rpm -Uvh oracle-instantclient19.21-devel-19.21.0.0.0-1.x86_64.rpm
      
      # Install cx_Oracle for opc user
      sudo -u opc pip3 install cx_Oracle --user
      
      # Set environment variables for opc user
      echo 'export LD_LIBRARY_PATH=/usr/lib/oracle/19.21/client64/lib:$LD_LIBRARY_PATH' >> /home/opc/.bashrc
      echo 'export PATH=/usr/lib/oracle/19.21/client64/bin:$PATH' >> /home/opc/.bashrc
      
      # Create test connection script
      cat > /home/opc/test_connect.py << 'EOF'
      #!/usr/bin/env python3
      """
      Oracle Database Connection Test Script
      
      This script tests the Oracle Instant Client installation and 
      provides a template for connecting to your Autonomous Database.
      """
      
      import sys
      import os
      
      def test_cx_oracle():
          """Test cx_Oracle installation"""
          try:
              import cx_Oracle
              print("✅ cx_Oracle imported successfully")
              print(f"   cx_Oracle version: {cx_Oracle.version}")
              return True
          except ImportError as e:
              print(f"❌ Failed to import cx_Oracle: {e}")
              return False
      
      def test_oracle_client():
          """Test Oracle Instant Client initialization"""
          try:
              import cx_Oracle
              cx_Oracle.init_oracle_client(lib_dir="/usr/lib/oracle/19.21/client64/lib")
              print("✅ Oracle Instant Client initialized successfully")
              return True
          except Exception as e:
              print(f"❌ Failed to initialize Oracle client: {e}")
              return False
      
      def test_database_connection():
          """Test database connection (requires wallet)"""
          try:
              import cx_Oracle
              
              # Check if wallet directory exists
              wallet_dir = "/home/opc/wallet"
              if not os.path.exists(wallet_dir):
                  print("⚠️  Wallet directory not found. Please:")
                  print("   1. Download wallet from OCI Console")
                  print("   2. Upload wallet.zip to this instance")
                  print("   3. Run: unzip wallet.zip -d wallet/")
                  return False
              
              # Check for required wallet files
              required_files = ["tnsnames.ora", "sqlnet.ora", "cwallet.sso"]
              missing_files = [f for f in required_files if not os.path.exists(os.path.join(wallet_dir, f))]
              
              if missing_files:
                  print(f"⚠️  Missing wallet files: {missing_files}")
                  return False
              
              print("✅ Wallet files found")
              print("📝 To test database connection, update this script with:")
              print("   - Your admin password")
              print("   - Uncomment the connection code below")
              
              # Example connection code (commented out)
              print("\n# Example connection code:")
              print("# connection = cx_Oracle.connect(")
              print("#     'ADMIN',")
              print("#     'your_admin_password',")
              print("#     '${adb_service_name}',")
              print("#     config_dir=wallet_dir")
              print("# )")
              print("# cursor = connection.cursor()")
              print("# cursor.execute('SELECT \\'Hello Oracle!\\' FROM dual')")
              print("# result = cursor.fetchone()")
              print("# print(f'Database says: {result[0]}')")
              print("# cursor.close()")
              print("# connection.close()")
              
              return True
              
          except Exception as e:
              print(f"❌ Database connection test failed: {e}")
              return False
      
      def main():
          """Main test function"""
          print("Oracle Database Connection Test")
          print("=" * 40)
          
          tests = [
              ("cx_Oracle Installation", test_cx_oracle),
              ("Oracle Client Initialization", test_oracle_client),
              ("Database Connection Setup", test_database_connection)
          ]
          
          results = []
          for test_name, test_func in tests:
              print(f"\n🔍 Testing {test_name}...")
              result = test_func()
              results.append((test_name, result))
          
          print("\n" + "=" * 40)
          print("TEST SUMMARY")
          print("=" * 40)
          
          for test_name, result in results:
              status = "✅ PASS" if result else "❌ FAIL"
              print(f"{status}: {test_name}")
          
          all_passed = all(result for _, result in results)
          if all_passed:
              print("\n🎉 All tests passed! Your environment is ready.")
          else:
              print("\n⚠️  Some tests failed. Check the output above.")
      
      if __name__ == "__main__":
          main()
      EOF
      
      # Make script executable
      chmod +x /home/opc/test_connect.py
      chown opc:opc /home/opc/test_connect.py
      
      # Create simple Oracle client test
      cat > /home/opc/test_client.py << 'EOF'
      #!/usr/bin/env python3
      """Simple Oracle client test"""
      
      try:
          import cx_Oracle
          cx_Oracle.init_oracle_client(lib_dir="/usr/lib/oracle/19.21/client64/lib")
          print("✅ Oracle client ready!")
      except Exception as e:
          print(f"❌ Oracle client error: {e}")
      EOF
      
      chmod +x /home/opc/test_client.py
      chown opc:opc /home/opc/test_client.py
      
      # Create setup completion marker
      echo "Oracle client setup completed at $(date)" > /var/log/oracle-setup.log
      echo "Setup completed successfully!"
      
    path: /tmp/setup_oracle.sh
    permissions: '0755'

runcmd:
  - /tmp/setup_oracle.sh > /var/log/cloud-init-setup.log 2>&1
  - echo "Cloud-init setup completed" >> /var/log/cloud-init-setup.log