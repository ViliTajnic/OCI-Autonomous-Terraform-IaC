#!/usr/bin/env python3
"""
Oracle ADB Sample Queries and Operations

This script demonstrates various database operations including:
- Creating tables
- Inserting data
- Running SELECT queries
- Aggregate operations
- Database metadata queries

Requirements:
- oracledb package: pip3 install --user oracledb
- Wallet files in /home/opc/wallet/
- ADMIN password and wallet password

Usage:
    python3 sample_queries.py
"""

import oracledb
import getpass

def run_sample_queries():
    """Execute sample database operations and queries."""
    username = "ADMIN"
    password = getpass.getpass("Enter ADMIN password: ")
    wallet_password = getpass.getpass("Enter wallet password: ")
    
    try:
        # Connect to database
        connection = oracledb.connect(
            user=username,
            password=password,
            dsn="pythonadb_high",
            config_dir="/home/opc/wallet",
            wallet_location="/home/opc/wallet",
            wallet_password=wallet_password
        )
        
        cursor = connection.cursor()
        print("üöÄ Running sample queries...\n")
        
        # 1. Create a sample table
        print("1Ô∏è‚É£ Creating sample table...")
        try:
            cursor.execute("DROP TABLE sample_employees")
            print("   Dropped existing table")
        except:
            pass  # Table might not exist
            
        cursor.execute("""
            CREATE TABLE sample_employees (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                name VARCHAR2(100),
                department VARCHAR2(50),
                salary NUMBER(10,2),
                hire_date DATE
            )
        """)
        print("‚úÖ Table created successfully")
        
        # 2. Insert sample data
        print("\n2Ô∏è‚É£ Inserting sample data...")
        sample_data = [
            ('John Doe', 'Engineering', 75000.00, '2023-01-15'),
            ('Jane Smith', 'Marketing', 65000.00, '2023-02-20'),
            ('Bob Johnson', 'Sales', 55000.00, '2023-03-10'),
            ('Alice Brown', 'Engineering', 80000.00, '2023-01-25'),
            ('Charlie Wilson', 'HR', 58000.00, '2023-04-05'),
            ('Diana Davis', 'Engineering', 72000.00, '2023-05-12')
        ]
        
        for emp in sample_data:
            cursor.execute("""
                INSERT INTO sample_employees (name, department, salary, hire_date) 
                VALUES (:1, :2, :3, TO_DATE(:4, 'YYYY-MM-DD'))
            """, emp)
        
        connection.commit()
        print(f"‚úÖ Inserted {len(sample_data)} records")
        
        # 3. Query data
        print("\n3Ô∏è‚É£ Querying data...")
        cursor.execute("""
            SELECT id, name, department, salary, 
                   TO_CHAR(hire_date, 'YYYY-MM-DD') as hire_date
            FROM sample_employees 
            ORDER BY salary DESC
        """)
        
        print("üìä Employee Data:")
        print(f"{'ID':<3} {'Name':<15} {'Department':<12} {'Salary':<10} {'Hire Date':<12}")
        print("-" * 58)
        
        for row in cursor.fetchall():
            print(f"{row[0]:<3} {row[1]:<15} {row[2]:<12} ${row[3]:<9,.2f} {row[4]:<12}")
        
        # 4. Aggregate queries
        print("\n4Ô∏è‚É£ Running aggregate queries...")
        
        # Average salary by department
        cursor.execute("""
            SELECT department, 
                   COUNT(*) as emp_count,
                   AVG(salary) as avg_salary,
                   MAX(salary) as max_salary,
                   MIN(salary) as min_salary
            FROM sample_employees 
            GROUP BY department
            ORDER BY avg_salary DESC
        """)
        
        print("\nüìà Department Statistics:")
        print(f"{'Department':<12} {'Count':<6} {'Avg Salary':<12} {'Max Salary':<12} {'Min Salary':<12}")
        print("-" * 60)
        
        for row in cursor.fetchall():
            print(f"{row[0]:<12} {row[1]:<6} ${row[2]:<11,.2f} ${row[3]:<11,.2f} ${row[4]:<11,.2f}")
        
        # 5. Advanced queries
        print("\n5Ô∏è‚É£ Advanced queries...")
        
        # Employees hired in 2023 with salary above average
        cursor.execute("""
            SELECT name, department, salary
            FROM sample_employees 
            WHERE salary > (SELECT AVG(salary) FROM sample_employees)
            AND EXTRACT(YEAR FROM hire_date) = 2023
            ORDER BY salary DESC
        """)
        
        print("\nüåü High Performers (Above Average Salary in 2023):")
        for row in cursor.fetchall():
            print(f"   {row[0]} - {row[1]} - ${row[2]:,.2f}")
        
        # 6. Database metadata
        print("\n6Ô∏è‚É£ Database metadata...")
        cursor.execute("""
            SELECT table_name, num_rows, last_analyzed 
            FROM user_tables 
            WHERE table_name = 'SAMPLE_EMPLOYEES'
        """)
        
        metadata = cursor.fetchone()
        if metadata:
            print(f"üìã Table: {metadata[0]}")
            print(f"üìä Rows: {metadata[1] or 'Not analyzed'}")
            print(f"üìÖ Last analyzed: {metadata[2] or 'Never'}")
        
        # 7. Table structure
        cursor.execute("""
            SELECT column_name, data_type, data_length, nullable
            FROM user_tab_columns 
            WHERE table_name = 'SAMPLE_EMPLOYEES'
            ORDER BY column_id
        """)
        
        print(f"\nüèóÔ∏è  Table Structure:")
        print(f"{'Column':<15} {'Type':<15} {'Length':<8} {'Nullable':<10}")
        print("-" * 50)
        
        for row in cursor.fetchall():
            nullable = "Yes" if row[3] == "Y" else "No"
            print(f"{row[0]:<15} {row[1]:<15} {row[2]:<8} {nullable:<10}")
        
        # 8. Clean up (optional - comment out if you want to keep the table)
        print("\n8Ô∏è‚É£ Cleaning up...")
        cursor.execute("DROP TABLE sample_employees")
        print("‚úÖ Sample table dropped")
        
        cursor.close()
        connection.close()
        print("\nüéâ All operations completed successfully!")
        
    except oracledb.DatabaseError as e:
        print(f"‚ùå Database error: {e}")
    except Exception as e:
        print(f"üí• Error: {e}")

if __name__ == "__main__":
    run_sample_queries()